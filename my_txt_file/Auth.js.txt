Auth.js



// signup

exports.signup = async (req, res) => {
  // data fetch from request ki body
  try {
    const {
      email,
      password,
      confirmPassword,
      otp,
      accountType,
      contactNumber,
      firstName,
      lastName,
    } = req.body;

    // validate the data

    if (
      !email ||
      !password ||
      !confirmPassword ||
      !otp ||
      !contactNumber ||
      !firstName ||
      !lastName ||
      password !== confirmPassword
    ) {
      return res.status(403).json({
        success: false,
        message: "Please provide all required fields.",
      });
    }

    // match both passwords
    if (password !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message:
          "Password and Confirm password does not match.please try again.",
      });
    }

    // check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "User already exists, please login instead.",
      });
    }

    //  find most recent otp for the user
    const recentOtp = await OTP.findOne({ email })
      .sort({ createdAt: -1 })
      .limit(1);
    if (!recentOtp) {
      return res.status(400).json({
        success: false,
        message: "No OTP found for this email.",
      });
    }
    console.log(recentOtp);

    //   validate the OTP
    if (recentOtp.length === 0) {
      return res.status(400).json({
        success: false,
        message: " OTP not found. Please try again.",
      });
    } else if (otp !== recentOtp.otp) {
      return res.status(400).json({
        success: false,
        message: "Invalid OTP. Please try again.",
      });
    }
    // hash the password

    const hashedPassword = await bcrypt.hash(password, 10);
    //   create profile

    const profileDetails = await Profiler.create({
      gender: null,
      dateOfBirth: null,
      address: null,
      contactNumber: null,
    });

    // entry create in DB

    const user = await User.create({
      email,
      password: hashedPassword,
      accountType,
      contactNumber,
      firstName,
      lastName,
      addtionalDetails: profileDetails._id,
      image: `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,
    });

    // return res
    res.status(200).json({
      success: true,
      message: "User created successfully.",
      user,
    });
  } catch (error) {
    console.log("Error in signup:", error);
    return res.status(500).json({
      success: false,
      message: "Internal server error.",
      error: error.message,
    });
  }
};

// login

exports.login = async (req, res) => {
  try {
    // get the data from request body
    const { email, password } = req.body;

    // validate the data
    if (!email || !password) {
      return res.status(403).json({
        success: false,
        message: "Please provide all required fields.",
      });
    }

    // check if user exists
    const user = await User.findOne({ email }).populate("addtionalDetails");

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "User not found. Please sign up.",
      });
    }

    // check password
    const isPasswordValid = await bcrypt.compare(password, user.password);
    {
        const payload = {
          id: user._id,
          email: user.email,
          accountType: user.accountType,
        };
      const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: "1h",
      });
      user.token = token;
      user.password = undefined; // remove password from user object

    //   cookie generate 
    const options = {
        expiresIn: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days
        httpOnly: true, // cookie is not accessible via JavaScript
    }
        res.cookie("token", token, options).status(200).json({
        success: true,
        message: "Login successful.",
        token,
        user,
        message: "User logged in successfully.",
        });
    }
    else {
        return res.status(401).json({
            success: false,
            message: "Invalid password. Please try again.",
        })
    }
} catch (error) {
    console.log("Error in login:", error);
  }
}